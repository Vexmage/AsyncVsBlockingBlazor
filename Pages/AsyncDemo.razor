@page "/async-demo"
@inject AsyncVsBlockingBlazor.Services.AsyncTester Tester

<div class="container">
    <h2 class="text-primary">Async vs Blocking Demo</h2>

    <p class="lead">
        This page lets you compare different execution models in C#.
        Run the tests below and see how each method affects performance!
    </p>

    <!-- Blocking vs Async Section -->
    <div class="card">
        <div class="card-body">
            <h3 class="card-title text-info">Blocking vs Async Execution</h3>
            <p>
                Blocking execution (synchronous) <strong>pauses</strong> the entire thread,
                whereas asynchronous execution <strong>continues</strong> running other tasks while waiting.
            </p>
            <button @onclick="RunBlockingTest">Run Simulated Blocking Test</button>
            <p class="text-muted">@blockingResult</p>

            <button @onclick="RunAsyncTest">Run Async Test</button>
            <p class="text-muted">@asyncResult</p>
        </div>
    </div>

    <!-- Parallel Execution Section -->
    <div class="card">
        <div class="card-body">
            <h3 class="card-title text-success">Parallel Execution</h3>
            <p>
                Instead of waiting for each task to complete one at a time,
                parallel execution allows multiple tasks to run <strong>at the same time</strong>.
            </p>
            <button @onclick="RunParallelAsyncTest">Run Parallel Async Test</button>
            <p class="text-muted">@parallelResult</p>
        </div>
    </div>

    <!-- API Calls & Database Storage -->
    <div class="card">
        <div class="card-body">
            <h3 class="card-title text-warning">API Calls & Database Storage</h3>
            <p>
                This test makes a call to an external API and saves the result in a database.
                This simulates how async programming is used in real-world applications.
            </p>
            <button @onclick="FetchApiData">Fetch API Data</button>
            <p class="text-muted">@apiResult</p>

            <button @onclick="SaveApiResponseToDatabase">Save API Response to DB</button>
            <p class="text-muted">@saveDbResult</p>

            <button @onclick="RetrieveApiResponses">Retrieve API Responses</button>
            <p class="text-muted">@dbResult</p>
        </div>
    </div>

    <!-- Explanation Section -->
    <div class="card">
        <div class="card-body">
            <h3 class="card-title text-danger">How This Works</h3>
            <ul>
                <li><strong>Blocking Test:</strong> Simulates blocking execution using a while-loop.</li>
                <li><strong>Async Test:</strong> Uses <code>Task.Delay</code> to run without blocking.</li>
                <li><strong>Parallel Async Test:</strong> Runs two async tasks at the same time.</li>
                <li><strong>API Call:</strong> Fetches data from an external API.</li>
                <li><strong>Database Save & Retrieve:</strong> Stores API results in an SQLite database.</li>
            </ul>
        </div>
    </div>

    <a href="/" class="btn btn-secondary mt-3">Return to Home</a>
</div>

@code {
    private string blockingResult = "";
    private string asyncResult = "";
    private string parallelResult = "";
    private string apiResult = "";
    private string saveDbResult = "";
    private string dbResult = "";

    private async Task RunBlockingTest() => blockingResult = await Tester.RunBlockingTest();
    private async Task RunAsyncTest() => asyncResult = await Tester.RunAsyncTest();
    private async Task RunParallelAsyncTest() => parallelResult = await Tester.RunParallelAsyncTest();
    private async Task FetchApiData() => apiResult = await Tester.FetchDataFromApi();
    private async Task SaveApiResponseToDatabase() => saveDbResult = await Tester.SaveApiResponseToDatabaseAsync();
    private async Task RetrieveApiResponses()
    {
        var responses = await Tester.RetrieveApiResponsesAsync();
        dbResult = responses.Count > 0 ? $"Retrieved {responses.Count} API responses" : "No data found";
    }
}
